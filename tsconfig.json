// Файл "tsconfig.json":
// - устанавливает корневой каталог проекта TypeScript;
// - выполняет настройку параметров компиляции;
// - устанавливает файлы проекта.
// Присутствие файла "tsconfig.json" в папке указывает TypeScript, что это корневая папка проекта.
// Внутри "tsconfig.json" указываются настройки компилятора TypeScript и корневые файлы проекта.
// Программа компилятора "tsc" ищет файл "tsconfig.json" сначала в папке, где она расположена, затем поднимается выше и ищет в родительских папках согласно их вложенности друг в друга.
// Команда "tsc --project C:\path\to\my\project\folder" берет файл "tsconfig.json" из папки, расположенной по данному пути.
// Файл "tsconfig.json" может быть полностью пустым, тогда компилятор скомпилирует все файлы с настройками заданными по умолчанию.
// Опции компилятора, перечисленные в командной строке перезаписывают собой опции, заданные в файле "tsconfig.json".
{
  "compilerOptions": {
    // Настраивает параметры компиляции. Параметры называются также, как и в командной строке.
    "allowJs": true, // Разрешать компилировать файлы с JavaScript-кодом?
    "alwaysStrict": true, // Компилировать ли каждый файл в строгом режиме и создавать ли 'use strict' для каждого выходного файла? Требуется TypeScript версии 2.1 или новее.
    "esModuleInterop": true, // Создать хелперы __importStar и __importDefault для обеспечения совместимости с экосистемой Babel и включить allowSyntheticDefaultImports для совместимости с системой типов.
    "module": "CommonJS", // Определяет тип импорта кода в итоговом файле, прописанном в "outFile". Необходимо задавать при использовании опции "outFile".
    "noUnusedLocals": true, // Показывать ошибку, если где-то найдены неиспользуемые локальные значения.
    "outDir": "./build", // Поместить все скомпилированные файлы в данную папку, согласно их вложенности в исходниках. Если задана опция "outFile", то опция "outDir" будет проигнорирована.
    "removeComments": true, // Удалить все комментарии из итогового файла.
    "strict": false, // Включить ли все строги проверки типов сразу: noImplicitAny, noImplicitThis, alwaysStrict, strictNullChecks, strictFunctionTypes, strictPropertyInitialization?
    "sourceMap": true, // Создавать ли соответствующие source map файлы ".map"?
    "target": "ES2016", // Тип кода создаваемого итогового файла.
    // Если "outFile" и "outDir" не заданы, то выходные файлы будут созданы рядом со своими исходниками.
  },

    "include": [
      // Секция "include" позволяет скомпилировать все файлы, находящиеся в заданных папках.
      // Если секция "files" и секция "include" заданы вместе, то будут скомпилированы только файлы, перечисленные в обеих секциях.
      // Все файлы, на которые есть ссылки во включенных файлах из секции "files" и секции "include", также скомпилируются.
      "./app.ts/"
    ],
    "exclude": [
      // Секция "exclude" позволяет исключить при компиляции определенные файлы, которые находятся в заданных папках секции "include" или в папках всего проекта, если секция "include" не задана.
      // Компилятор не будет учитывать перечисленные в секции "exclude" файлы TypeScript, которые находятся в папках из секции "include".
      // Однако файлы, заданные в секции "files" будут обязательно скомпилированы.
      // Если секция "exclude" не указана, то по умолчанию будут исключаться из компиляции все файлы из папок:
      // - node_modules,
      // - bower_components,
      // - jspm_packages,
      // - файлы из папки, указанной в опции компилятора "outDir".
      // "node_modules"
    ]
}
